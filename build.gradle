/**
 * Versions Properties.
 */
ext {
  Versions = [
    // Build
    'checkstyle'            : '6.17',
    'jacoco'                : '0.7.5.201505241946',

    // Internal
    'self'            : project.version,
    
    // Core
    'spring-framework'      : '4.3.1.RELEASE',
    'spring-security'       : '4.1.1.RELEASE',
    'spring-data-jpa'       : '1.9.4.RELEASE',
    'spring-batch'          : '3.0.6.RELEASE',
    'spring-boot'           : '1.3.3.RELEASE',
	'spring-zuul'			: '1.1.6.RELEASE',
    'javax.transaction-api' : '1.2',
    'hibernate'             : '4.3.11.Final',
    'hibernate-validator'   : '5.2.1.Final',
    'slf4j'                 : '1.7.16',
    'log4j'                 : '1.2.16',
    'commons-lang3'         : '3.3.2',
    'jackson'               : '2.4.4',
    'jsonpath'              : '0.8.1',
    'postgresql'            : '9.3-1100-jdbc41',
    'hsqldb'                : '2.3.2',
    'guava'                 : '19.0',
    'lombok'                : '1.16.8',
    'findbugs'              : '3.0.0',
    'logback'               : '1.1.3',
    'javax.servlet-api'     : '3.0.1',
    'mysql'                 : '5.1.38',
    'akka'                  : '2.4.7',
    
    // Test
    'mockito'               : '1.10.19',
    'junit'                 : '4.12',
    'h2'                    : '1.3.170',
    'jsonpath'              : '0.8.1',
    'jbehave'               : '4.0.4',
    'assertj'               : '3.3.0',
    'akka-inmemory'         : '1.3.0',
    'javax.el'              : '3.0.0'
  ]
}

/**
 * Build Script Section.
 */
buildscript {
  ext {
    Versions = [
      'spring-boot'           : '1.3.3.RELEASE',
      'gradle-node'           : '0.13',
      'gradle-gulp'           : '0.11'
    ]
  }
  repositories {
    jcenter()
    mavenCentral()
  }

  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${Versions.'spring-boot'}")
    classpath("com.moowork.gradle:gradle-node-plugin:${Versions.'gradle-node'}")
    classpath group: 'com.moowork.gradle', name: 'gradle-gulp-plugin', version: Versions.'gradle-gulp'
  }
}

/**
 * Sub Project Configuration
 */
subprojects {

  apply plugin: 'java'
  apply plugin: 'jacoco'
  apply plugin: 'eclipse'
  apply plugin: 'checkstyle'
  apply plugin: 'findbugs'
  apply plugin: 'maven'

  group = 'net.rc.lab.springboot'

  repositories {
	mavenCentral()
    mavenLocal()
  }

  jacoco { toolVersion = "${Versions.jacoco}" }

  configurations { checkstyleConfig }

  dependencies {
    checkstyleConfig ("com.puppycrawl.tools:checkstyle:${Versions.checkstyle}") { transitive = false }
  }

  checkstyle {
    toolVersion = "${Versions.'checkstyle'}"
    config = resources.text.fromArchiveEntry(configurations.checkstyleConfig, 'google_checks.xml')
  }

  // Fail Checkstyle on warning.
  tasks.withType(Checkstyle).each { checkstyleTask ->
    checkstyleTask.doLast {
      reports.all { report ->
        def outputFile = report.destination
        if (outputFile.exists() && outputFile.text.contains("<error ")) {
          outputs.upToDateWhen { false }
          throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
        }
      }
    }
  }
  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  task wrapper(type: Wrapper) { gradleVersion = '2.13' }

  task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
  }

  artifacts {
    archives sourcesJar
    archives javadocJar
  }
}


/**
 * Build All Configuration Below
 */
defaultTasks 'clean', 'release'

allprojects { task go {} }

task release << {
  println("Finish Release ${project.name}.")
  println("Please check database release under database/build/")
  println("Please check web release under web/build/distributions")
}

project(':database').go.dependsOn ':database:makeReleaseZip'

project(':entities').go.dependsOn ':database:go', ':entities:build', ':entities:install'

project(':test-helper').go.dependsOn ':entities:go', ':test-helper:build', ':test-helper:install'

project(':core').go.dependsOn ':test-helper:go', ':core:build', ':core:install'

project(':gateway').go.dependsOn ':core:go', ':gateway:build', ':gateway:makeReleaseZip'

project(':auth').go.dependsOn ':gateway:go', ':auth:build', ':auth:makeReleaseZip'

project(':resource').go.dependsOn ':auth:go', ':resource:build', ':resource:makeReleaseZip'

project(':ui').go.dependsOn ':resource:go', ':ui:build', ':ui:makeReleaseZip'

project(':entities').go.mustRunAfter ':database:go'
project(':test-helper').go.mustRunAfter ':entities:go'
project(':core').go.mustRunAfter ':test-helper:go'
project(':gateway').go.mustRunAfter ':core:go'
project(':auth').go.mustRunAfter ':gateway:go'
project(':resource').go.mustRunAfter ':auth:go'
project(':ui').go.mustRunAfter ':resource:go'

release.dependsOn ':ui:go'
